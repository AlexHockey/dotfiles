extends c
priority 1

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet class "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/}(${2:arguments});
	virtual ~${1/(\w+).*/$1/}();

private:
	${0:/* data */}
};
endsnippet

snippet set "std::set (set)" w
std::set<${1:key}>$0
endsnippet

snippet map "std::map (map)" w
std::map<${1:key}, ${2:value}>$0
endsnippet

snippet vec "std::vector (v)" w
std::vector<${1:char}>$0
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:T}>$0
endsnippet

snippet str "std::string" w
std::string$0
endsnippet

snippet try "try ... catch" !b
try
{
  ${1:/* code */}
}
catch(${2:...})
{
	${3:/* recovery code */}
}
endsnippet

snippet catch "catch block" !b
catch(${1:...})
{
  ${2:/* recovery code */}
}
endsnippet

snippet forit "For loop with iterator" !b
for($1::${2:iterator} ${3:it} = $4.begin();
    $3 != $4.end();
    ++$3)
{
  ${5:/* code */}
}
endsnippet

snippet dyn "dynamic cast" !b
dynamic_cast<${1:type}>(${2:object})
endsnippet
# vim:ft=snippets:

snippet cout "c++ style print to stdout" !b
std::cout << $1${2: << std::endl};
endsnippet

snippet del "Delete a pointer and NULL it" !b
delete ${1:ptr}; $1 = NULL;$0
endsnippet

# vim:ft=snippets
